{"mappings":"oeAAAA,EAAA,S,WCAA,IAAAC,EAAAD,EAAA,S,aCcOE,eAAeC,EAAeC,EAAaC,GAChD,IACE,MAAMC,EAAYC,MAAMC,KAAKH,GACvBI,EAAcL,EAAYM,KAAIC,IAClC,MAAMC,EAAQN,EAAUO,MAAKC,GAASA,EAAMC,KAAOJ,IACnD,OAAOC,EAAQA,EAAMI,KAAO,EAAE,IAEhC,IAAIC,EAAe,GAQnB,OANEA,EADER,EAAYS,OAAS,EACRT,EAAYU,MAAM,EAAG,GAAGC,KAAK,MAAQ,aAErCX,EAAYW,KAAK,MAGlCC,QAAQC,IAAIL,GACLA,C,CACP,MAAOM,GAEP,OADAC,EAAQD,GACD,E,EC9BJ,SAASE,EAAaC,GAC3B,MAAMC,EAASD,EAAMhB,KACnBR,OAAOa,GACLA,EAAEa,YACFA,EAAWC,aACXA,EAAYC,MACZA,EAAKC,UACLA,EAASC,aACTA,MAEA,MAAMC,EAAgB9B,EACpB4B,EACAG,KAAKC,MAAMC,aAAaC,QAAQ,YAE5BC,EAAa,uCAAuCV,IAE1D,IAAIW,EAAc,GAEhBA,EADmB,aAAjBV,EACY,eAEAA,EAAaW,MAAM,KAAK,GAKxC,MAAO,uCAAuCzB,sFAC4BuB,WAAoBR,iIAG5DA,6GANbG,OAQoCM,yDACjBP,6FAI9B,IAId,OAAOS,QAAQC,IAAIf,GAAQgB,MAAKC,IAC9B,MAAMC,EAAcD,EAAQxB,KAAK,IACjC0B,SACGC,cAAc,eACdC,mBAAmB,YAAaH,EAAY,G,CFzCrCC,SAASC,cAAc,eA4B9B,SAASvB,EAAQD,GACtBF,QAAQC,IAAI,WAAWC,I,EChClBrB,iBACL,IACE,MAAM+C,QAAehD,EAAAiD,QAAMC,IACzB,0FAEFf,aAAagB,QAAQ,SAAUlB,KAAKmB,UAAUJ,EAAOK,KAAKL,Q,CAE1D,MAAO1B,GACPC,EAAQD,E,EDHZ,GDJAgC,OAAOC,iBAAiB,QCKjB,WACL,MACMC,EADcF,OAAOG,WACK,IAAM,EAAI,GAW5CxD,iBACE,IAKE,aAJoBD,EAAAiD,QAAMC,IACxB,0F,CAIF,MAAO5B,GACPC,EAAQD,E,GAjBVoC,GAAiBhB,MAAK,EAACW,KAAEA,MAGvB7B,EAFc6B,EAAKV,QAAQzB,MAAM,EAAGsC,IAEhBd,MAAK,KACvBtB,QAAQC,IAAIgC,EAAK,GACjB,G","sources":["src/index.js","src/JS/weekly-trends-main.js","src/JS/weekly-trends-genres.js","src/JS/weekly-trends-markup.js"],"sourcesContent":["import './JS/header.js';\nimport './JS/hero.js';\nimport { showWeeklyTrends } from './JS/weekly-trends-main.js';\nwindow.addEventListener('load', showWeeklyTrends);","import axios from 'axios';\nimport './weekly-trends-markup.js';\nimport { createMarkup } from './weekly-trends-markup.js';\nimport { getGenres } from './weekly-trends-genres.js';\nconst refs = {\n  trendsList: document.querySelector('.cards-list'),\n};\ngetGenres();\nexport function showWeeklyTrends() {\n  const screenWidth = window.innerWidth;\n  const numMovies = screenWidth < 768 ? 1 : 3;\n\n  getTrendyFilms().then(({ data }) => {\n    const films = data.results.slice(0, numMovies);\n\n    createMarkup(films).then(() => {\n      console.log(data);\n    });\n  });\n}\n\nasync function getTrendyFilms() {\n  try {\n    const films = await axios.get(\n      'https://api.themoviedb.org/3/trending/all/week?api_key=41b8f9437bf3f899281f8a3f9bdc0891'\n    );\n\n    return films;\n  } catch (error) {\n    onError(error);\n  }\n}\n\nexport function onError(error) {\n  console.log(` error  ${error}`);\n}","import { onError } from './weekly-trends-main';\nimport axios from 'axios';\nexport async function getGenres() {\n  try {\n    const genres = await axios.get(\n      'https://api.themoviedb.org/3/genre/movie/list?api_key=41b8f9437bf3f899281f8a3f9bdc0891'\n    );\n    localStorage.setItem('genres', JSON.stringify(genres.data.genres)); // Зберегти масив у localStorage\n    return genres;\n  } catch (error) {\n    onError(error);\n  }\n}\n\nexport async function validateGenres(genresArray, genresData) {\n  try {\n    const allGenres = Array.from(genresData);\n    const genresNames = genresArray.map(genreId => {\n      const genre = allGenres.find(genre => genre.id === genreId);\n      return genre ? genre.name : '';\n    });\n    let genresString = '';\n    if (genresNames.length > 2) {\n      genresString = genresNames.slice(0, 2).join(', ') + ' and other';\n    } else {\n      genresString = genresNames.join(', ');\n    }\n\n    console.log(genresString);\n    return genresString;\n  } catch (error) {\n    onError(error);\n    return '';\n  }\n}\n","import { validateGenres } from './weekly-trends-genres';\n\nexport function createMarkup(films) {\n  const markup = films.map(\n    async ({\n      id,\n      poster_path,\n      release_date,\n      title,\n      genre_ids,\n      vote_average,\n    }) => {\n      const genresPromise = validateGenres(\n        genre_ids,\n        JSON.parse(localStorage.getItem('genres'))\n      );\n      const posterPath = `https://image.tmdb.org/t/p/original/${poster_path}`;\n\n      let releaseDate = '';\n      if (release_date === 'undefind') {\n        releaseDate = 'Date unknown';\n      } else {\n        releaseDate = release_date.split('-')[0];\n      }\n\n      const genres = await genresPromise;\n\n      return `<li class=\"card-item item\" data-id=\"${id}\">\n            <img class=\"film-poster\" src=\"https://image.tmdb.org/t/p/original/${posterPath}\" alt=\"${title} poster\" />\n            <div class=\"overlay\">\n              <div class=\"film-info\">\n                <p class=\"film-title\">${title}</p>\n                <div class=\"film-details\">\n                  <span class=\"film-description\">${genres} | ${releaseDate}</span>\n                  <span class=\"film-rating\">${vote_average}</span>\n                </div>\n              </div>\n            </div>\n          </li>`;\n    }\n  );\n\n  return Promise.all(markup).then(results => {\n    const finalMarkup = results.join('');\n    document\n      .querySelector('.cards-list')\n      .insertAdjacentHTML('beforeend', finalMarkup);\n  });\n}"],"names":["parcelRequire","$2shzp","async","$4b5a71e11b447836$export$3405d2a8709f05df","genresArray","genresData","allGenres","Array","from","genresNames","map","genreId","genre1","find","genre","id","name","genresString","length","slice","join","console","log","error","$87c2fee9d7397d8f$export$2288787135a8f66e","$d65ce9afe054ba59$export$24783e9f3a24abe4","films","markup","poster_path","release_date","title","genre_ids","vote_average","genresPromise","JSON","parse","localStorage","getItem","posterPath","releaseDate","split","Promise","all","then","results","finalMarkup","document","querySelector","insertAdjacentHTML","genres","default","get","setItem","stringify","data","window","addEventListener","numMovies","innerWidth","$87c2fee9d7397d8f$var$getTrendyFilms"],"version":3,"file":"index.83cacfa9.js.map"}