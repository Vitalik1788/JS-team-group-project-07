{"mappings":"iiBAAAA,EAAA,S,WCAA,IAAAC,EAAAD,EAAA,S,0BCAAA,EAAA,S,WCAAC,EAAAD,EAAA,S,mCAEsBE,I,OAAAA,EAAfC,EAAAF,EAAA,CAAAE,EAAAC,GAAAC,MAAA,SAAAC,I,IAEGC,E,2FAAeC,EAAAC,QAAMC,IACzB,0F,cADIH,EAAMI,EAAAC,KAGZC,aAAaC,QAAQ,SAAUC,KAAKC,UAAUT,EAAOU,KAAKV,S,kBACnDA,G,gCAEPW,EAAOP,EAAAQ,I,0DARoBC,MAAAC,KAAAC,U,UAYTC,EAAeC,EAAaC,G,OAA5BC,EAAcN,MAAAC,KAAAC,U,UAAdI,I,OAAAA,EAAfvB,EAAAF,EAAA,CAAAE,EAAAC,GAAAC,MAAA,SAAAC,EAA8BkB,EAAaC,G,IAExCE,EACAC,EAIFC,E,kFALEF,EAAYG,MAAMC,KAAKN,GACvBG,EAAcJ,EAAYQ,KAAI,SAAAC,GAClC,IAAMC,EAAQP,EAAUQ,MAAK,SAAAC,G,OAASA,EAAMC,KAAOJ,C,IACnD,OAAOC,EAAQA,EAAMI,KAAO,E,IAE1BT,EAAe,GAEjBA,EADED,EAAYW,OAAS,EACRX,EAAYY,MAAM,EAAG,GAAGC,KAAK,MAAQ,aAErCb,EAAYa,KAAK,MAGlCC,QAAQC,IAAId,G,kBACLA,G,uCAEPX,EAAOP,EAAAQ,I,kBACA,I,0DAlByBC,MAAAC,KAAAC,U,CDZ7B,SAASsB,EAAaC,GAC3B,I,EAAMC,EAASD,EAAMb,K,EACnB7B,EAAAF,EAAA,CAAAE,EAAAC,GAAAC,MAAA,SAAAC,EAAAyC,G,IACEV,EACAW,EACAC,EACAC,EACAC,EACAC,EAEMC,EAIAC,EAEFC,EAOEhD,E,yEApBN8B,EAAEU,EAAFV,GACAW,EAAWD,EAAXC,YACAC,EAAYF,EAAZE,aACAC,EAAKH,EAALG,MACAC,EAASJ,EAATI,UACAC,EAAYL,EAAZK,aAEMC,EAAgB9B,EACpB4B,EACApC,KAAKyC,MAAM3C,aAAa4C,QAAQ,YAE5BH,EAAa,uCAAmDI,OAAZV,GAEtDO,EAAc,GAEhBA,EADmB,aAAjBN,EACY,eAEAA,EAAaU,MAAM,KAAK,G,SAGnBN,E,cAAf9C,EAAMI,EAAAC,K,kBAEL,uCACmE8C,OAD5BrB,EAAG,sFAC6CqB,OAApBJ,EAAW,WAGnDI,OAH4DR,EAAM,iIAKvDQ,OAFXR,EAAM,uGAEiBQ,OAAZnD,EAAO,OACZmD,OADiBH,EAAY,yDAChBG,OAAbN,EAAa,+F,yFAQzD,OAAOQ,QAAQC,IAAIf,GAAQgB,MAAK,SAAAC,GAC9B,IAAMC,EAAcD,EAAQtB,KAAK,IACjCwB,SACGC,cAAc,eACdC,mBAAmB,YAAaH,E,IDzCzBC,SAASC,cAAc,e,SAgBtBE,I,OAAAA,EAAfjE,EAAAF,EAAA,CAAAE,EAAAC,GAAAC,MAAA,SAAAC,I,IAEUuC,E,2FAAcrC,EAAAC,QAAMC,IACxB,2F,cADImC,EAAKlC,EAAAC,K,kBAIJiC,G,gCAEP3B,EAAOP,EAAAQ,I,0DARkBC,MAAAC,KAAAC,U,CAYtB,SAASJ,EAAQmD,GACtB3B,QAAQC,IAAI,WAAiBe,OAANW,G,aEhCHnE,EAASkB,MAAAC,KAAAC,U,CFK/B,GDJAgD,OAAOC,iBAAiB,QCKjB,WACL,IACMC,EADcF,OAAOG,WACK,IAAM,EAAI,G,kBAW7BL,EAAchD,MAAAC,KAAAC,U,EAT3BoD,GAAiBZ,MAAK,SAAAf,G,IAAG9B,EAAI8B,EAAJ9B,KAGvB2B,EAFc3B,EAAK8C,QAAQvB,MAAM,EAAGgC,IAEhBV,MAAK,WACvBpB,QAAQC,IAAI1B,E","sources":["src/index.js","src/JS/weekly-trends-main.js","src/JS/weekly-trends-markup.js","src/JS/weekly-trends-genres.js"],"sourcesContent":["import './JS/header.js';\nimport './JS/hero.js';\nimport { showWeeklyTrends } from './JS/weekly-trends-main.js';\nwindow.addEventListener('load', showWeeklyTrends);","import axios from 'axios';\nimport './weekly-trends-markup.js';\nimport { createMarkup } from './weekly-trends-markup.js';\nimport { getGenres } from './weekly-trends-genres.js';\nconst refs = {\n  trendsList: document.querySelector('.cards-list'),\n};\ngetGenres();\nexport function showWeeklyTrends() {\n  const screenWidth = window.innerWidth;\n  const numMovies = screenWidth < 768 ? 1 : 3;\n\n  getTrendyFilms().then(({ data }) => {\n    const films = data.results.slice(0, numMovies);\n\n    createMarkup(films).then(() => {\n      console.log(data);\n    });\n  });\n}\n\nasync function getTrendyFilms() {\n  try {\n    const films = await axios.get(\n      'https://api.themoviedb.org/3/trending/all/week?api_key=41b8f9437bf3f899281f8a3f9bdc0891'\n    );\n\n    return films;\n  } catch (error) {\n    onError(error);\n  }\n}\n\nexport function onError(error) {\n  console.log(` error  ${error}`);\n}","import { validateGenres } from './weekly-trends-genres';\n\nexport function createMarkup(films) {\n  const markup = films.map(\n    async ({\n      id,\n      poster_path,\n      release_date,\n      title,\n      genre_ids,\n      vote_average,\n    }) => {\n      const genresPromise = validateGenres(\n        genre_ids,\n        JSON.parse(localStorage.getItem('genres'))\n      );\n      const posterPath = `https://image.tmdb.org/t/p/original/${poster_path}`;\n\n      let releaseDate = '';\n      if (release_date === 'undefind') {\n        releaseDate = 'Date unknown';\n      } else {\n        releaseDate = release_date.split('-')[0];\n      }\n\n      const genres = await genresPromise;\n\n      return `<li class=\"card-item item\" data-id=\"${id}\">\n            <img class=\"film-poster\" src=\"https://image.tmdb.org/t/p/original/${posterPath}\" alt=\"${title} poster\" />\n            <div class=\"overlay\">\n              <div class=\"film-info\">\n                <p class=\"film-title\">${title}</p>\n                <div class=\"film-details\">\n                  <span class=\"film-description\">${genres} | ${releaseDate}</span>\n                  <span class=\"film-rating\">${vote_average}</span>\n                </div>\n              </div>\n            </div>\n          </li>`;\n    }\n  );\n\n  return Promise.all(markup).then(results => {\n    const finalMarkup = results.join('');\n    document\n      .querySelector('.cards-list')\n      .insertAdjacentHTML('beforeend', finalMarkup);\n  });\n}","import { onError } from './weekly-trends-main';\nimport axios from 'axios';\nexport async function getGenres() {\n  try {\n    const genres = await axios.get(\n      'https://api.themoviedb.org/3/genre/movie/list?api_key=41b8f9437bf3f899281f8a3f9bdc0891'\n    );\n    localStorage.setItem('genres', JSON.stringify(genres.data.genres)); // Зберегти масив у localStorage\n    return genres;\n  } catch (error) {\n    onError(error);\n  }\n}\n\nexport async function validateGenres(genresArray, genresData) {\n  try {\n    const allGenres = Array.from(genresData);\n    const genresNames = genresArray.map(genreId => {\n      const genre = allGenres.find(genre => genre.id === genreId);\n      return genre ? genre.name : '';\n    });\n    let genresString = '';\n    if (genresNames.length > 2) {\n      genresString = genresNames.slice(0, 2).join(', ') + ' and other';\n    } else {\n      genresString = genresNames.join(', ');\n    }\n\n    console.log(genresString);\n    return genresString;\n  } catch (error) {\n    onError(error);\n    return '';\n  }\n}\n"],"names":["parcelRequire","$bpxeT","$252116d5091ed3c5$var$_getGenres","$parcel$interopDefault","$2TvXO","mark","_callee","genres","$dIxxU","default","get","_ctx","sent","localStorage","setItem","JSON","stringify","data","$6377858c77456395$export$2288787135a8f66e","t0","apply","this","arguments","$252116d5091ed3c5$export$3405d2a8709f05df","genresArray","genresData","$252116d5091ed3c5$var$_validateGenres","allGenres","genresNames","genresString","Array","from","map","genreId","genre1","find","genre","id","name","length","slice","join","console","log","$c333ae35198715b7$export$24783e9f3a24abe4","films","markup","param","poster_path","release_date","title","genre_ids","vote_average","genresPromise","posterPath","releaseDate","parse","getItem","concat","split","Promise","all","then","results","finalMarkup","document","querySelector","insertAdjacentHTML","$6377858c77456395$var$_getTrendyFilms","error","window","addEventListener","numMovies","innerWidth","$6377858c77456395$var$getTrendyFilms"],"version":3,"file":"index.ee07fdd4.js.map"}