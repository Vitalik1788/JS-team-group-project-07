{"mappings":"qhBAAA,MAAMA,EAAWC,SAASC,cAAc,YASxC,WACE,MAAMC,EACJC,OAAOC,WAAaJ,SAASK,gBAAgBC,YAG/CN,SAASO,KAAKC,MAAMC,SAAW,SAC/BT,SAASO,KAAKC,MAAME,aAAe,GAAGR,K,CAbxCS,GAEAR,OAAOS,OAAS,KACdb,EAASc,UAAUC,OAAO,iBAC1Bd,SAASO,KAAKQ,gBAAgB,QAAQ,E,4CCNxC,IAAAC,EAAAC,EAAA,SCAAC,EAAAD,EAAA,S,aAIA,MAAME,EAAoBD,EAAAE,QAAMC,OAAO,CACrCC,QAAS,8CAETC,QAAS,CAAEC,cAAe,UAAUC,EAAAC,gBAG/BC,eAAeC,IAGpB,aAFuBT,EAAkBU,OAEzBC,KAAKC,O,CCbvB,IAAAC,EAAAf,EAAA,S,4BAGO,SAASgB,EAAsBC,GACpC,MAAMC,cACJA,EAAaC,YACbA,EAAWC,MACXA,EAAKC,aACLA,EAAYC,WACZA,EAAUC,WACVA,EAAUC,aACVA,EAAYC,UACZA,EAASC,SACTA,EAAQC,GACRA,GACEV,EAEEW,GAAU,EAAAb,EAAAc,mBAAkBrB,EAAAsB,YAAaH,GAGzCI,EAAeH,EAAU,SAAW,MACpCI,EAAUJ,EAAU,yBAA2B,oBAuBrD,MAAO,+KArBS1C,OAAO+C,OAAOC,MAAQ,IAAMf,EAAcD,0BA0BvCE,uNAOwBA,iRAhCnBC,EAAac,WAAW,IAAK,qPA0CRX,+EAEAD,wMA3CnB,EAAAR,EAAAqB,YAAWd,2KAUtB,EAAAe,EAAAC,gBACbb,EACAc,KAAKC,MAAMC,aAAaC,QAAQ,gMA6CShB,8DACSC,UAAWI,KAAgBC,4B,CCnF1E,SAASW,GAAkBxB,YAAEA,EAAWD,cAAEA,EAAaE,MAAEA,IAO3ClC,OAAO0D,WAAW,sBAArC,MAIMC,EAAM9D,SAASC,cAAc,uBACnC,IAAK6D,EAAK,OAAOC,QAAQC,IAAI,uBAE7B,MAAMC,EAAa,sCAAsC7B,IACnD8B,EAAe,sCAAsC/B,IAE3D,OAAIhC,OAAO+C,OAAOC,MAAQ,KAAOW,EAAIK,MAAQF,EACnCH,EAAIK,IAAMF,EAGhB9D,OAAO+C,OAAOC,OAAS,KAAOW,EAAIK,MAAQD,EACpCJ,EAAIK,IAAMD,OADpB,C,cHdF,MAAME,EAAapE,SAASC,cAAc,kBAE1CE,OAAOkE,iBAAiB,oBAExB1C,iBACE,IACE,MAAM2C,QAAuB1C,IACvB2C,GAAc,EAAAvC,EAAAwC,eAAcF,IAsBtC,SAAwBG,EAAS,IAC/BL,EAAWM,UAAYD,C,CAlBrBE,CAFe1C,EAAsBsC,IAKrC,MAAMK,EAAsBC,EAAA7D,EAAA,EAC1B,IAAM4C,EAAkBW,IACxB,KAGFpE,OAAOkE,iBAAiB,SAAUO,E,CAElC,MAAOE,GACPf,QAAQe,MAAM,SAAUA,E","sources":["src/javascript/loader.js","src/upcoming/upcoming.js","src/upcoming/api-service.js","src/upcoming/create-upcoming-markup.js","src/upcoming/img-handler.js"],"sourcesContent":["const loaderEl = document.querySelector('.loader');\n\nloaderInit();\n\nwindow.onload = () => {\n  loaderEl.classList.remove('loader--shown');\n  document.body.removeAttribute('style');\n};\n\nfunction loaderInit() {\n  const scrollBarWidth =\n    window.innerWidth - document.documentElement.clientWidth;\n\n  // loaderEl.classList.add('loader--shown');\n  document.body.style.overflow = 'hidden';\n  document.body.style.paddingRight = `${scrollBarWidth}px`;\n}\n","import debounce from 'lodash.debounce';\nimport { getUpcomingMovies } from './api-service';\nimport { careateUpcomingMarkup } from './create-upcoming-markup';\nimport { handleUpcomingImg } from './img-handler';\nimport { getRandomItem } from './helpers';\n// import defaultImg from '../images/logo.png';\n\nconst upcomingEl = document.querySelector('.upcoming-card');\n\nwindow.addEventListener('DOMContentLoaded', handleUpcoming);\n\nasync function handleUpcoming() {\n  try {\n    const upcomingMovies = await getUpcomingMovies();\n    const randomMovie = getRandomItem(upcomingMovies);\n    // console.log(randomMovie);\n    \n    const markup = careateUpcomingMarkup(randomMovie);\n    \n    updateUpcoming(markup);\n    // handleUpcomingImg(randomMovie);\n\n    const debouncedImgHandler = debounce(\n      () => handleUpcomingImg(randomMovie),\n      200\n    );\n\n    window.addEventListener('resize', debouncedImgHandler);\n    //\n  } catch (error) {\n    console.error('error:', error);\n    // updateUpcoming(failMarkup)\n    ('ERR_BAD_REQUEST');\n  }\n}\n\nfunction updateUpcoming(markup = '') {\n  upcomingEl.innerHTML = markup;\n}\n\n\n","import axios from 'axios';\n// import { API_KEY } from '../fetch/api_key';\nimport { API_BAERER } from '../fetch/api_key';\n\nconst upcomingMoviesApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/movie/upcoming',\n  // params: { language: 'en-US', page: '1', region: 'UA' },\n  headers: { Authorization: `Bearer ${API_BAERER}` },\n});\n\nexport async function getUpcomingMovies() {\n  const response = await upcomingMoviesApi.get();\n  // console.log(response);\n  return response.data.results;\n}\n","import { roundToTen, findFilmAtStorage } from './helpers';\nimport { STORAGE_KEY } from '../fetch/api_key';\nimport { validateGenres } from '../javascript/weekly-trends-genres';\nexport function careateUpcomingMarkup(film) {\n  const {\n    backdrop_path,\n    poster_path,\n    title,\n    release_date,\n    popularity,\n    vote_count,\n    vote_average,\n    genre_ids,\n    overview,\n    id,\n  } = film;\n\n  const isSaved = findFilmAtStorage(STORAGE_KEY, id);\n  // console.log('myIsSaved', isSaved);\n\n  const btnAttribute = isSaved ? 'remove' : 'add';\n  const btnText = isSaved ? 'Remove from my library' : 'Add to my library';\n  //\n  const imgPath = window.screen.width < 768 ? poster_path : backdrop_path;\n  const transformedDate = release_date.replaceAll('-', '.');\n  const roundedPopularity = roundToTen(popularity);\n\n  // const trimedGenres = trimGenreList(['comedy', 'action', 'thriller']);\n\n  // function trimGenreList(genres) {\n  //   if (genres.length > 2) return `${genres.slice(0, 2).join(', ')}, ...`;\n  //   else return `${genres.join(', ')}`;\n  // }\n\n\n  const genres = validateGenres(\n    genre_ids,\n    JSON.parse(localStorage.getItem('genres'))\n  );\n  //console.log(genresPromise)\n  //const genres = await genresPromise;\n  //const genres = Promise.resolve(genresPromise).then(result => result);\n  //console.log(genres);\n\n  return `\n        <div class='upcoming-card__figure'>\n          <div class='upcoming-card__layout'></div>\n            <img\n              src=\"https://image.tmdb.org/t/p/original${imgPath}\"\n              alt=\"${title}\"\n              loading='lazy'\n              class='upcoming-card__img'\n            > \n          </div>\n        </div>\n        <div class='upcoming-card__body'>\n          <h3 class=\"upcoming-card__title\">${title}</h3>\n          <div class='metrics-list__main-container'>\n            <ul class=\"list metrics-list\">\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Release date</p>\n                <p class=\"metrics-text metrics-text--date\">${transformedDate}</p>\n              </li>\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Vote / Votes</p>\n                <p class=\"metrics-text metrics-text--vote\">\n                  <span class=\"vote-wrapper\">${vote_average}</span>\n                  /\n                  <span class=\"vote-wrapper\">${vote_count}</span>\n                </p>\n              </li>\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Popularity</p>\n                <p class=\"metrics-text\">${roundedPopularity}</p>\n              </li>\n              <li class=\"metrics-list__item\">\n                <p class=\"metrics-text\">Genre</p>\n                <p class=\"metrics-text\">${genres}</p>\n              </li>\n            </ul>\n          </div>\n          <h4 class=\"upcoming-card__subtitle metrics-text\">ABOUT</h4>\n            <p class=\"upcoming-card__text\">${overview}</p>\n          <button class=\"btn\" type=\"button\" data-id=${id} data-${btnAttribute}>${btnText}</button>\n        </div>`;\n}\n","export function handleUpcomingImg({ poster_path, backdrop_path, title }) {\n  // const imgContainerEl = document.querySelector('.upcoming-card__figure');\n  // if (!imgContainerEl) return console.log('no upcoming section');\n\n  // const imgIsPresent = imgContainerEl.firstElementChild?.nodeName === 'IMG';\n  // console.log(imgIsPresent);\n\n  const mediaWidth = window.matchMedia('(max-width: 767px)');\n  // mediaWidth.onchange(() => console.log('change media'));\n  // console.log(mediaWidth);\n\n  const img = document.querySelector('.upcoming-card__img');\n  if (!img) return console.log('no upcoming section');\n\n  const posterLink = `https://image.tmdb.org/t/p/original${poster_path}`;\n  const backdropLink = `https://image.tmdb.org/t/p/original${backdrop_path}`;\n\n  if (window.screen.width < 768 && img.src !== posterLink) {\n    return (img.src = posterLink);\n  }\n\n  if (window.screen.width >= 768 && img.src !== backdropLink) {\n    return (img.src = backdropLink);\n  }\n\n  // if (imgIsPresent && !mediaWidth.matches) {\n  //   clearElement(imgContainerEl);\n  // }\n\n  // if (imgIsPresent) return;\n\n  // if (mediaWidth.matches) {\n  //   const img = document.createElement('img');\n\n  //   const link = poster_path\n  //     ? `https://image.tmdb.org/t/p/original${poster_path}`\n  //     : defaultImg;\n\n  //   img.src = link;\n  //   img.alt = title;\n  //   img.loading = 'lazy';\n  //   img.classList.add('upcoming-card__poster');\n\n  //   console.log(img);\n  //   imgContainerEl.append(img);\n  // }\n}\n\nfunction checkMedia(url) {\n  x = window.matchMedia('(max-width: 767px)');\n  if (x.matches) return console.log(url);\n  console.log('more');\n}\n"],"names":["$e732a1c9caa75242$var$loaderEl","document","querySelector","scrollBarWidth","window","innerWidth","documentElement","clientWidth","body","style","overflow","paddingRight","$e732a1c9caa75242$var$loaderInit","onload","classList","remove","removeAttribute","$50Kfe","parcelRequire","$2shzp","$8d13b1ce6cc74407$var$upcomingMoviesApi","default","create","baseURL","headers","Authorization","$l6Rnt","API_BAERER","async","$8d13b1ce6cc74407$export$577747a77907970f","get","data","results","$lH8sM","$a21ab0e734481888$export$f4becdac8252a1ad","film","backdrop_path","poster_path","title","release_date","popularity","vote_count","vote_average","genre_ids","overview","id","isSaved","findFilmAtStorage","STORAGE_KEY","btnAttribute","btnText","screen","width","replaceAll","roundToTen","$5bV6Z","validateGenres","JSON","parse","localStorage","getItem","$6edd81693594a270$export$f5a341b7ca0be7a","matchMedia","img","console","log","posterLink","backdropLink","src","$ed84471251116087$var$upcomingEl","addEventListener","upcomingMovies","randomMovie","getRandomItem","markup","innerHTML","$ed84471251116087$var$updateUpcoming","debouncedImgHandler","$parcel$interopDefault","error"],"version":3,"file":"index.648787d8.js.map"}